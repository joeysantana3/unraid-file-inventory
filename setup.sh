#!/bin/bash
# high_performance_nas_scanner.sh - Optimized for 192-thread system

echo "Setting up High-Performance NAS Scanner..."

# Create working directory structure
echo "Creating directory structure..."
mkdir -p /mnt/user/appdata/nas-scanner/{scan_data,logs}
cd /mnt/user/appdata/nas-scanner

echo "Creating scanner files..."

# Create Python scanner (base64 encoded to avoid content conflicts)
cat > nas_scanner_hp.py.b64 << 'PYTHON_B64_END'
IyEvdXNyL2Jpbi9lbnYgcHl0aG9uMwoiIiIKSGlnaC1QZXJmb3JtYW5jZSBOQVMgU2Nhbm5lciAtIFNpbXBsaWZpZWQgYW5kIFJvYnVzdAoiIiIKCmltcG9ydCBvcwppbXBvcnQgc3lzCmltcG9ydCBqc29uCmltcG9ydCBoYXNobGliCmltcG9ydCBzcWxpdGUzCmltcG9ydCBhcmdwYXJzZQppbXBvcnQgdGltZQppbXBvcnQgbG9nZ2luZwpmcm9tIHBhdGhsaWIgaW1wb3J0IFBhdGgKZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZXRpbWUKZnJvbSBtdWx0aXByb2Nlc3NpbmcgaW1wb3J0IFBvb2wsIGNwdV9jb3VudCwgUXVldWUsIFByb2Nlc3MKZnJvbSBjb25jdXJyZW50LmZ1dHVyZXMgaW1wb3J0IFRocmVhZFBvb2xFeGVjdXRvcgppbXBvcnQgc2lnbmFsCmltcG9ydCBxdWV1ZQpmcm9tIGNvbnRleHRsaWIgaW1wb3J0IGNvbnRleHRtYW5hZ2VyCgojIENvbmZpZ3VyYXRpb24gY29uc3RhbnRzCkRFRkFVTFRfV09SS0VSUyA9IG1pbihjcHVfY291bnQoKSwgNDgpCkRFRkFVTFRfSEFTSF9XT1JLRVJTID0gMTYKQkFUQ0hfU0laRSA9IDEwMDAKUVVFVUVfU0laRSA9IDUwMDAKTEFSR0VfRklMRV9USFJFU0hPTEQgPSAxMCAqIDEwMjQgKiAxMDI0ICAjIDEwTUIKU0FNUExFX1NJWkUgPSA2NCAqIDEwMjQgICMgNjRLQgoKIyBGaWxlIHR5cGUgbWFwcGluZwpGSUxFX1RZUEVTID0gewogICAgJy5qcGcnOiAncGhvdG9zJywgJy5qcGVnJzogJ3Bob3RvcycsICcucG5nJzogJ3Bob3RvcycsICcuZ2lmJzogJ3Bob3RvcycsCiAgICAnLm1wNCc6ICd2aWRlb3MnLCAnLmF2aSc6ICd2aWRlb3MnLCAnLm1rdic6ICd2aWRlb3MnLCAnLm1vdic6ICd2aWRlb3MnLAogICAgJy5tcDMnOiAnbXVzaWMnLCAnLmZsYWMnOiAnbXVzaWMnLCAnLndhdic6ICdtdXNpYycsICcubTRhJzogJ211c2ljJywKICAgICcucGRmJzogJ2RvY3VtZW50cycsICcuZG9jJzogJ2RvY3VtZW50cycsICcuZG9jeCc6ICdkb2N1bWVudHMnLCAnLnR4dCc6ICdkb2N1bWVudHMnLAogICAgJy56aXAnOiAnYXJjaGl2ZXMnLCAnLnJhcic6ICdhcmNoaXZlcycsICcuN3onOiAnYXJjaGl2ZXMnLCAnLnRhcic6ICdhcmNoaXZlcycsCiAgICAnLmlzbyc6ICdkaXNrX2ltYWdlcycsICcuaW1nJzogJ2Rpc2tfaW1hZ2VzJywgJy5kbWcnOiAnZGlza19pbWFnZXMnCn0KCmRlZiBzZXR1cF9sb2dnaW5nKCk6CiAgICAiIiJTZXR1cCBzaW1wbGUgbG9nZ2luZyIiIgogICAgbG9nZ2luZy5iYXNpY0NvbmZpZygKICAgICAgICBsZXZlbD1sb2dnaW5nLklORk8sCiAgICAgICAgZm9ybWF0PSclKGFzY3RpbWUpcyAtICUobGV2ZWxuYW1lKXMgLSAlKG1lc3NhZ2UpcycKICAgICkKICAgIHJldHVybiBsb2dnaW5nLmdldExvZ2dlcihfX25hbWVfXykKCiMgVXNlIEBjb250ZXh0bWFuYWdlciB0byBlbnN1cmUgZGF0YWJhc2UgY29ubmVjdGlvbnMgYXJlIHByb3Blcmx5IGNsb3NlZCBldmVuIGlmIGV4Y2VwdGlvbnMgb2NjdXIKQGNvbnRleHRtYW5hZ2VyCmRlZiBkYXRhYmFzZV9jb25uZWN0aW9uKGRiX3BhdGgpOgogICAgIiIiU2FmZSBkYXRhYmFzZSBjb25uZWN0aW9uIHdpdGggcHJvcGVyIGNsZWFudXAiIiIKICAgIGNvbm4gPSBzcWxpdGUzLmNvbm5lY3QoZGJfcGF0aCwgdGltZW91dD0zMC4wKQogICAgdHJ5OgogICAgICAgICMgU2FmZSBwZXJmb3JtYW5jZSBzZXR0aW5ncyAobm90IHN5bmNocm9ub3VzPU9GRikKICAgICAgICBjb25uLmV4ZWN1dGUoJ1BSQUdNQSBqb3VybmFsX21vZGU9V0FMJykKICAgICAgICBjb25uLmV4ZWN1dGUoJ1BSQUdNQSBzeW5jaHJvbm91cz1OT1JNQUwnKSAgIyBTYWZlIGJ1dCBzdGlsbCBmYXN0CiAgICAgICAgY29ubi5leGVjdXRlKCdQUkFHTUEgY2FjaGVfc2l6ZT0tNjQwMDAnKSAgIyA2NE1CIGNhY2hlCiAgICAgICAgY29ubi5leGVjdXRlKCdQUkFHTUEgdGVtcF9zdG9yZT1NRU1PUlknKQogICAgICAgICMgJ3lpZWxkIGNvbm4nIHByb3ZpZGVzIHRoZSBkYXRhYmFzZSBjb25uZWN0aW9uIHRvIHRoZSBjb250ZXh0IGJsb2NrLAogICAgICAgICMgYWxsb3dpbmcgdGhlIGNhbGxlciB0byB1c2UgJ3dpdGggZGF0YWJhc2VfY29ubmVjdGlvbiguLi4pIGFzIGNvbm46JwogICAgICAgICMgYW5kIGVuc3VyaW5nIGNsZWFudXAgaW4gdGhlICdmaW5hbGx5JyBibG9jayBhZnRlciB0aGUgYmxvY2sgZXhpdHMuCiAgICAgICAgeWllbGQgY29ubgogICAgZmluYWxseToKICAgICAgICBjb25uLmNsb3NlKCkKCmNsYXNzIERhdGFiYXNlTWFuYWdlcjoKICAgICIiIkhhbmRsZXMgYWxsIGRhdGFiYXNlIG9wZXJhdGlvbnMiIiIKICAgIAogICAgZGVmIF9faW5pdF9fKHNlbGYsIGRiX3BhdGgpOgogICAgICAgIHNlbGYuZGJfcGF0aCA9IGRiX3BhdGgKICAgICAgICBzZWxmLmxvZ2dlciA9IGxvZ2dpbmcuZ2V0TG9nZ2VyKF9fbmFtZV9fKQogICAgICAgIHNlbGYuX2luaXRfc2NoZW1hKCkKICAgIAogICAgZGVmIF9pbml0X3NjaGVtYShzZWxmKToKICAgICAgICAiIiJJbml0aWFsaXplIGRhdGFiYXNlIHNjaGVtYSIiIgogICAgICAgIHdpdGggZGF0YWJhc2VfY29ubmVjdGlvbihzZWxmLmRiX3BhdGgpIGFzIGNvbm46CiAgICAgICAgICAgIGNvbm4uZXhlY3V0ZSgnJycKICAgICAgICAgICAgICAgIENSRUFURSBUQUJMRSBJRiBOT1QgRVhJU1RTIGZpbGVzICgKICAgICAgICAgICAgICAgICAgICBwYXRoIFRFWFQgUFJJTUFSWSBLRVksCiAgICAgICAgICAgICAgICAgICAgc2l6ZSBJTlRFR0VSLAogICAgICAgICAgICAgICAgICAgIG10aW1lIFJFQUwsCiAgICAgICAgICAgICAgICAgICAgY2hlY2tzdW0gVEVYVCwKICAgICAgICAgICAgICAgICAgICBtb3VudF9wb2ludCBURVhULAogICAgICAgICAgICAgICAgICAgIGZpbGVfdHlwZSBURVhULAogICAgICAgICAgICAgICAgICAgIGV4dGVuc2lvbiBURVhULAogICAgICAgICAgICAgICAgICAgIHNjYW5fdGltZSBSRUFMCiAgICAgICAgICAgICAgICApIFdJVEhPVVQgUk9XSUQKICAgICAgICAgICAgJycnKQogICAgICAgICAgICAKICAgICAgICAgICAgY29ubi5leGVjdXRlKCcnJwogICAgICAgICAgICAgICAgQ1JFQVRFIFRBQkxFIElGIE5PVCBFWElTVFMgc2Nhbl9zdGF0cyAoCiAgICAgICAgICAgICAgICAgICAgbW91bnRfcG9pbnQgVEVYVCBQUklNQVJZIEtFWSwKICAgICAgICAgICAgICAgICAgICBmaWxlc19zY2FubmVkIElOVEVHRVIsCiAgICAgICAgICAgICAgICAgICAgYnl0ZXNfc2Nhbm5lZCBJTlRFR0VSLAogICAgICAgICAgICAgICAgICAgIHN0YXJ0X3RpbWUgUkVBTCwKICAgICAgICAgICAgICAgICAgICBlbmRfdGltZSBSRUFMCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICcnJykKICAgICAgICAgICAgY29ubi5jb21taXQoKQogICAgCiAgICBkZWYgc2F2ZV9maWxlcyhzZWxmLCBmaWxlX2JhdGNoKToKICAgICAgICAiIiJTYXZlIGEgYmF0Y2ggb2YgZmlsZXMgc2FmZWx5IiIiCiAgICAgICAgaWYgbm90IGZpbGVfYmF0Y2g6CiAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAKICAgICAgICB0cnk6CiAgICAgICAgICAgIHdpdGggZGF0YWJhc2VfY29ubmVjdGlvbihzZWxmLmRiX3BhdGgpIGFzIGNvbm46CiAgICAgICAgICAgICAgICBkYXRhID0gWyhmWydwYXRoJ10sIGZbJ3NpemUnXSwgZlsnbXRpbWUnXSwgZi5nZXQoJ2NoZWNrc3VtJyksIAogICAgICAgICAgICAgICAgICAgICAgICBmWydtb3VudF9wb2ludCddLCBmLmdldCgnZmlsZV90eXBlJywgJ290aGVyJyksIAogICAgICAgICAgICAgICAgICAgICAgICBmWydleHRlbnNpb24nXSwgZlsnc2Nhbl90aW1lJ10pIAogICAgICAgICAgICAgICAgICAgICAgIGZvciBmIGluIGZpbGVfYmF0Y2hdCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgVXNlIGV4ZWN1dGVtYW55IHRvIGVmZmljaWVudGx5IGluc2VydCBvciB1cGRhdGUgbXVsdGlwbGUgZmlsZSByZWNvcmRzIGluIGEgc2luZ2xlIGRhdGFiYXNlIHRyYW5zYWN0aW9uLgogICAgICAgICAgICAgICAgIyBUaGlzIHJlZHVjZXMgdGhlIG51bWJlciBvZiByb3VuZC10cmlwcyB0byB0aGUgZGF0YWJhc2UgYW5kIGltcHJvdmVzIHBlcmZvcm1hbmNlIGZvciBsYXJnZSBiYXRjaGVzLgogICAgICAgICAgICAgICAgY29ubi5leGVjdXRlbWFueSgnJycKICAgICAgICAgICAgICAgICAgICBJTlNFUlQgT1IgUkVQTEFDRSBJTlRPIGZpbGVzIAogICAgICAgICAgICAgICAgICAgIChwYXRoLCBzaXplLCBtdGltZSwgY2hlY2tzdW0sIG1vdW50X3BvaW50LCBmaWxlX3R5cGUsIGV4dGVuc2lvbiwgc2Nhbl90aW1lKQogICAgICAgICAgICAgICAgICAgIFZBTFVFUyAoPywgPywgPywgPywgPywgPywgPywgPykKICAgICAgICAgICAgICAgICcnJywgZGF0YSkKICAgICAgICAgICAgICAgIGNvbm4uY29tbWl0KCkKICAgICAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiJEYXRhYmFzZSBzYXZlIGZhaWxlZDoge2V9IikKCmRlZiBjYWxjdWxhdGVfY2hlY2tzdW0oZmlsZXBhdGgsIHNpemUpOgogICAgIiIiQ2FsY3VsYXRlIGZpbGUgY2hlY2tzdW0gZWZmaWNpZW50bHkiIiIKICAgIHRyeToKICAgICAgICAjIEFsdGVybmF0aXZlcyB0byBtZDUgaW5jbHVkZTogc2hhMSwgc2hhMjU2LCBzaGE1MTIsIGJsYWtlMmIsIGJsYWtlMnMsIGFuZCB4eGhhc2ggKGlmIGluc3RhbGxlZCkuCiAgICAgICAgIyBQcm9zL2NvbnM6CiAgICAgICAgIyAtIG1kNTogRmFzdCwgYnV0IHdlYWsgc2VjdXJpdHkgKGNvbGxpc2lvbnMgcG9zc2libGUpLiBHb29kIGZvciBub24tc2VjdXJpdHkgZmlsZSBkZWR1cGxpY2F0aW9uLgogICAgICAgICMgLSBzaGExOiBTbGlnaHRseSBzbG93ZXIsIGFsc28gd2VhayBmb3Igc2VjdXJpdHksIGJ1dCBmZXdlciBjb2xsaXNpb25zIHRoYW4gbWQ1LgogICAgICAgICMgLSBzaGEyNTYvc2hhNTEyOiBNdWNoIHN0cm9uZ2VyLCBidXQgc2xvd2VyIHRoYW4gbWQ1L3NoYTEuCiAgICAgICAgIyAtIGJsYWtlMmIvYmxha2UyczogVmVyeSBmYXN0LCBzdHJvbmcsIGJ1aWx0LWluIHNpbmNlIFB5dGhvbiAzLjYuCiAgICAgICAgIyAtIHh4aGFzaDogRXh0cmVtZWx5IGZhc3QsIG5vbi1jcnlwdG9ncmFwaGljLCBnb29kIGZvciBjaGVja3N1bW1pbmcgbGFyZ2UgZmlsZXMsIHJlcXVpcmVzICd4eGhhc2gnIHBhY2thZ2UuCiAgICAgICAgIyBGb3IgaGlnaCBwZXJmb3JtYW5jZSBhbmQgcmVhc29uYWJsZSB1bmlxdWVuZXNzLCBibGFrZTJiIGlzIGEgZ29vZCBkZWZhdWx0LgogICAgICAgIGhhc2hfb2JqID0gaGFzaGxpYi5ibGFrZTJiKCkKICAgICAgICAKICAgICAgICBpZiBzaXplID4gTEFSR0VfRklMRV9USFJFU0hPTEQ6CiAgICAgICAgICAgICMgU2FtcGxlLWJhc2VkIGhhc2hpbmcgZm9yIGxhcmdlIGZpbGVzCiAgICAgICAgICAgIHdpdGggb3BlbihmaWxlcGF0aCwgJ3JiJykgYXMgZjoKICAgICAgICAgICAgICAgICMgRmlyc3Qgc2FtcGxlCiAgICAgICAgICAgICAgICBoYXNoX29iai51cGRhdGUoZi5yZWFkKFNBTVBMRV9TSVpFKSkKICAgICAgICAgICAgICAgICMgTWlkZGxlIHNhbXBsZQogICAgICAgICAgICAgICAgZi5zZWVrKHNpemUgLy8gMikKICAgICAgICAgICAgICAgIGhhc2hfb2JqLnVwZGF0ZShmLnJlYWQoU0FNUExFX1NJWkUpKQogICAgICAgICAgICAgICAgIyBFbmQgc2FtcGxlCiAgICAgICAgICAgICAgICBmLnNlZWsoLVNBTVBMRV9TSVpFLCAyKQogICAgICAgICAgICAgICAgaGFzaF9vYmoudXBkYXRlKGYucmVhZCgpKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgICMgRnVsbCBoYXNoIGZvciBzbWFsbGVyIGZpbGVzCiAgICAgICAgICAgIHdpdGggb3BlbihmaWxlcGF0aCwgJ3JiJykgYXMgZjoKICAgICAgICAgICAgICAgIGhhc2hfb2JqLnVwZGF0ZShmLnJlYWQoKSkKICAgICAgICAKICAgICAgICByZXR1cm4gaGFzaF9vYmouaGV4ZGlnZXN0KCkKICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgcmV0dXJuIE5vbmUKCmRlZiBjYXRlZ29yaXplX2ZpbGUoZmlsZXBhdGgpOgogICAgIiIiQ2F0ZWdvcml6ZSBmaWxlIGJ5IGV4dGVuc2lvbiIiIgogICAgZXh0ID0gUGF0aChmaWxlcGF0aCkuc3VmZml4Lmxvd2VyKCkKICAgIHJldHVybiBGSUxFX1RZUEVTLmdldChleHQsICdvdGhlcicpCgpkZWYgc2Nhbl9kaXJlY3RvcnkoYXJncyk6CiAgICAiIiJTY2FuIGEgc2luZ2xlIGRpcmVjdG9yeSAtIGRlc2lnbmVkIGZvciBtdWx0aXByb2Nlc3NpbmciIiIKICAgIHBhdGgsIG1vdW50X25hbWUgPSBhcmdzCiAgICBmaWxlcyA9IFtdCiAgICAKICAgIHRyeToKICAgICAgICBmb3IgZW50cnkgaW4gb3Muc2NhbmRpcihwYXRoKToKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgaWYgZW50cnkuaXNfZmlsZShmb2xsb3dfc3ltbGlua3M9RmFsc2UpOgogICAgICAgICAgICAgICAgICAgIHN0YXQgPSBlbnRyeS5zdGF0KGZvbGxvd19zeW1saW5rcz1GYWxzZSkKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBmaWxlX2luZm8gPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICdwYXRoJzogZW50cnkucGF0aCwKICAgICAgICAgICAgICAgICAgICAgICAgJ3NpemUnOiBzdGF0LnN0X3NpemUsCiAgICAgICAgICAgICAgICAgICAgICAgICdtdGltZSc6IHN0YXQuc3RfbXRpbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICdtb3VudF9wb2ludCc6IG1vdW50X25hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICdleHRlbnNpb24nOiBQYXRoKGVudHJ5Lm5hbWUpLnN1ZmZpeC5sb3dlcigpLAogICAgICAgICAgICAgICAgICAgICAgICAnZmlsZV90eXBlJzogY2F0ZWdvcml6ZV9maWxlKGVudHJ5LnBhdGgpLAogICAgICAgICAgICAgICAgICAgICAgICAnc2Nhbl90aW1lJzogdGltZS50aW1lKCkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBDYWxjdWxhdGUgY2hlY2tzdW0KICAgICAgICAgICAgICAgICAgICBpZiBzdGF0LnN0X3NpemUgPiAwOgogICAgICAgICAgICAgICAgICAgICAgICBmaWxlX2luZm9bJ2NoZWNrc3VtJ10gPSBjYWxjdWxhdGVfY2hlY2tzdW0oZW50cnkucGF0aCwgc3RhdC5zdF9zaXplKQogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVfaW5mb1snY2hlY2tzdW0nXSA9ICdlbXB0eScKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBmaWxlcy5hcHBlbmQoZmlsZV9pbmZvKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICBsb2dnaW5nLmdldExvZ2dlcihfX25hbWVfXykud2FybmluZyhmIlNraXBwaW5nIGZpbGUge2VudHJ5LnBhdGh9OiB7ZX0iKQogICAgICAgICAgICAgICAgCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgbG9nZ2luZy5nZXRMb2dnZXIoX19uYW1lX18pLndhcm5pbmcoZiJTa2lwcGluZyBkaXJlY3Rvcnkge3BhdGh9OiB7ZX0iKQogICAgCiAgICByZXR1cm4gZmlsZXMKCmNsYXNzIFNjYW5uZXI6CiAgICAiIiJNYWluIHNjYW5uZXIgY2xhc3MgLSBzaW1wbGlmaWVkIGFuZCBmb2N1c2VkIiIiCiAgICAKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBkYl9wYXRoLCBudW1fd29ya2Vycz1Ob25lKToKICAgICAgICBzZWxmLmxvZ2dlciA9IHNldHVwX2xvZ2dpbmcoKQogICAgICAgIHNlbGYuZGIgPSBEYXRhYmFzZU1hbmFnZXIoZGJfcGF0aCkKICAgICAgICBzZWxmLm51bV93b3JrZXJzID0gbnVtX3dvcmtlcnMgb3IgREVGQVVMVF9XT1JLRVJTCiAgICAgICAgc2VsZi5zaHV0ZG93biA9IEZhbHNlCiAgICAgICAgCiAgICAgICAgIyBTdGF0cwogICAgICAgIHNlbGYuZmlsZXNfc2Nhbm5lZCA9IDAKICAgICAgICBzZWxmLmJ5dGVzX3NjYW5uZWQgPSAwCiAgICAgICAgc2VsZi5zdGFydF90aW1lID0gdGltZS50aW1lKCkKICAgICAgICAKICAgICAgICAjIFNldHVwIHNpZ25hbCBoYW5kbGluZwogICAgICAgIHNpZ25hbC5zaWduYWwoc2lnbmFsLlNJR0lOVCwgc2VsZi5fc2lnbmFsX2hhbmRsZXIpCiAgICAgICAgc2lnbmFsLnNpZ25hbChzaWduYWwuU0lHVEVSTSwgc2VsZi5fc2lnbmFsX2hhbmRsZXIpCiAgICAKICAgIGRlZiBfc2lnbmFsX2hhbmRsZXIoc2VsZiwgc2lnbnVtLCBmcmFtZSk6CiAgICAgICAgIiIiSGFuZGxlIHNodXRkb3duIHNpZ25hbHMiIiIKICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCJTaHV0ZG93biBzaWduYWwgcmVjZWl2ZWQiKQogICAgICAgIHNlbGYuc2h1dGRvd24gPSBUcnVlCiAgICAKICAgIGRlZiBfY29sbGVjdF9kaXJlY3RvcmllcyhzZWxmLCByb290X3BhdGgpOgogICAgICAgICIiIkNvbGxlY3QgYWxsIGRpcmVjdG9yaWVzIHRvIHNjYW4iIiIKICAgICAgICBkaXJlY3RvcmllcyA9IFtdCiAgICAgICAgCiAgICAgICAgdHJ5OgogICAgICAgICAgICBmb3Igcm9vdCwgZGlycywgZmlsZXMgaW4gb3Mud2Fsayhyb290X3BhdGgpOgogICAgICAgICAgICAgICAgaWYgc2VsZi5zaHV0ZG93bjoKICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgZGlyZWN0b3JpZXMuYXBwZW5kKHJvb3QpCiAgICAgICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKGYiRmFpbGVkIHRvIHdhbGsgZGlyZWN0b3J5IHRyZWU6IHtlfSIpCiAgICAgICAgICAgIAogICAgICAgIHJldHVybiBkaXJlY3RvcmllcwogICAgCiAgICBkZWYgc2NhbihzZWxmLCBtb3VudF9wYXRoLCBtb3VudF9uYW1lKToKICAgICAgICAiIiJNYWluIHNjYW4gbWV0aG9kIC0gc2ltcGxpZmllZCBhcHByb2FjaCIiIgogICAgICAgIGlmIG5vdCBvcy5wYXRoLmV4aXN0cyhtb3VudF9wYXRoKToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiJQYXRoIGRvZXMgbm90IGV4aXN0OiB7bW91bnRfcGF0aH0iKQogICAgICAgICAgICByZXR1cm4KICAgICAgICAKICAgICAgICBzZWxmLnN0YXJ0X3RpbWUgPSB0aW1lLnRpbWUoKQogICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJTdGFydGluZyBzY2FuIG9mIHttb3VudF9uYW1lfSBhdCB7bW91bnRfcGF0aH0iKQogICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJVc2luZyB7c2VsZi5udW1fd29ya2Vyc30gd29ya2VycyIpCiAgICAgICAgCiAgICAgICAgIyBDb2xsZWN0IGFsbCBkaXJlY3RvcmllcyBmaXJzdAogICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIkNvbGxlY3RpbmcgZGlyZWN0b3JpZXMuLi4iKQogICAgICAgIGRpcmVjdG9yaWVzID0gc2VsZi5fY29sbGVjdF9kaXJlY3Rvcmllcyhtb3VudF9wYXRoKQogICAgICAgIAogICAgICAgIGlmIHNlbGYuc2h1dGRvd246CiAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAKICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiRm91bmQge2xlbihkaXJlY3Rvcmllcyl9IGRpcmVjdG9yaWVzIHRvIHNjYW4iKQogICAgICAgIAogICAgICAgICMgUHJlcGFyZSB3b3JrIGl0ZW1zCiAgICAgICAgd29ya19pdGVtcyA9IFsoZCwgbW91bnRfbmFtZSkgZm9yIGQgaW4gZGlyZWN0b3JpZXNdCiAgICAgICAgCiAgICAgICAgIyBQcm9jZXNzIHdpdGggd29ya2VyIHBvb2wKICAgICAgICB3aXRoIFBvb2wocHJvY2Vzc2VzPXNlbGYubnVtX3dvcmtlcnMpIGFzIHBvb2w6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHJlc3VsdHMgPSBwb29sLm1hcChzY2FuX2RpcmVjdG9yeSwgd29ya19pdGVtcykKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBQcm9jZXNzIHJlc3VsdHMgaW4gYmF0Y2hlcwogICAgICAgICAgICAgICAgYmF0Y2ggPSBbXQogICAgICAgICAgICAgICAgZm9yIGZpbGVfbGlzdCBpbiByZXN1bHRzOgogICAgICAgICAgICAgICAgICAgIGlmIHNlbGYuc2h1dGRvd246CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGJhdGNoLmV4dGVuZChmaWxlX2xpc3QpCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgaWYgbGVuKGJhdGNoKSA+PSBCQVRDSF9TSVpFOgogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9zYXZlX2JhdGNoKGJhdGNoKQogICAgICAgICAgICAgICAgICAgICAgICBiYXRjaCA9IFtdCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgU2F2ZSBmaW5hbCBiYXRjaAogICAgICAgICAgICAgICAgaWYgYmF0Y2g6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5fc2F2ZV9iYXRjaChiYXRjaCkKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgZXhjZXB0IEtleWJvYXJkSW50ZXJydXB0OgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygiU2NhbiBpbnRlcnJ1cHRlZCBieSB1c2VyIikKICAgICAgICAgICAgICAgIHBvb2wudGVybWluYXRlKCkKICAgICAgICAgICAgICAgIHBvb2wuam9pbigpCiAgICAgICAgCiAgICAgICAgc2VsZi5fcHJpbnRfc3RhdHMobW91bnRfbmFtZSkKICAgIAogICAgZGVmIF9zYXZlX2JhdGNoKHNlbGYsIGJhdGNoKToKICAgICAgICAiIiJTYXZlIGJhdGNoIGFuZCB1cGRhdGUgc3RhdHMiIiIKICAgICAgICBzZWxmLmRiLnNhdmVfZmlsZXMoYmF0Y2gpCiAgICAgICAgCiAgICAgICAgIyBVcGRhdGUgc3RhdHMKICAgICAgICBzZWxmLmZpbGVzX3NjYW5uZWQgKz0gbGVuKGJhdGNoKQogICAgICAgIHNlbGYuYnl0ZXNfc2Nhbm5lZCArPSBzdW0oZlsnc2l6ZSddIGZvciBmIGluIGJhdGNoKQogICAgICAgIAogICAgICAgICMgTG9nIHByb2dyZXNzCiAgICAgICAgZWxhcHNlZCA9IHRpbWUudGltZSgpIC0gc2VsZi5zdGFydF90aW1lCiAgICAgICAgZmlsZXNfcGVyX3NlYyA9IHNlbGYuZmlsZXNfc2Nhbm5lZCAvIGVsYXBzZWQgaWYgZWxhcHNlZCA+IDAgZWxzZSAwCiAgICAgICAgbWJfcGVyX3NlYyA9IChzZWxmLmJ5dGVzX3NjYW5uZWQgLyAxMDI0IC8gMTAyNCkgLyBlbGFwc2VkIGlmIGVsYXBzZWQgPiAwIGVsc2UgMAogICAgICAgIAogICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJQcm9jZXNzZWQ6IHtzZWxmLmZpbGVzX3NjYW5uZWQ6LH0gZmlsZXMgIgogICAgICAgICAgICAgICAgICAgICAgICBmIih7c2VsZi5ieXRlc19zY2FubmVkLzEwMjQqKjM6LjJmfSBHQikgfCAiCiAgICAgICAgICAgICAgICAgICAgICAgIGYie2ZpbGVzX3Blcl9zZWM6LjBmfSBmaWxlcy9zZWMgfCAiCiAgICAgICAgICAgICAgICAgICAgICAgIGYie21iX3Blcl9zZWM6LjBmfSBNQi9zZWMiKQogICAgCiAgICBkZWYgX3ByaW50X3N0YXRzKHNlbGYsIG1vdW50X25hbWUpOgogICAgICAgICIiIlByaW50IGZpbmFsIHN0YXRpc3RpY3MiIiIKICAgICAgICBlbGFwc2VkID0gdGltZS50aW1lKCkgLSBzZWxmLnN0YXJ0X3RpbWUKICAgICAgICAKICAgICAgICBwcmludChmIlxuU2NhbiBDb21wbGV0ZToge21vdW50X25hbWV9IikKICAgICAgICBwcmludCgiLSIgKiA1MCkKICAgICAgICBwcmludChmIkZpbGVzIHNjYW5uZWQ6IHtzZWxmLmZpbGVzX3NjYW5uZWQ6LH0iKQogICAgICAgIHByaW50KGYiVG90YWwgc2l6ZToge3NlbGYuYnl0ZXNfc2Nhbm5lZC8xMDI0Kio0Oi4yZn0gVEIiKQogICAgICAgIHByaW50KGYiVGltZToge2VsYXBzZWQvNjA6LjFmfSBtaW51dGVzIikKICAgICAgICBwcmludChmIlJhdGU6IHtzZWxmLmZpbGVzX3NjYW5uZWQvZWxhcHNlZDouMGZ9IGZpbGVzL3NlY29uZCIpCgpkZWYgbWFpbigpOgogICAgcGFyc2VyID0gYXJncGFyc2UuQXJndW1lbnRQYXJzZXIoZGVzY3JpcHRpb249J1NpbXBsZSBIaWdoLVBlcmZvcm1hbmNlIE5BUyBTY2FubmVyJykKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoJ21vdW50X3BhdGgnLCBoZWxwPSdQYXRoIHRvIHNjYW4nKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgnbW91bnRfbmFtZScsIGhlbHA9J05hbWUgZm9yIHRoaXMgbW91bnQnKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgnLS1kYicsIGRlZmF1bHQ9Jy9kYXRhL25hc19jYXRhbG9nLmRiJywgaGVscD0nRGF0YWJhc2UgcGF0aCcpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCctLXdvcmtlcnMnLCB0eXBlPWludCwgZGVmYXVsdD1ERUZBVUxUX1dPUktFUlMsIGhlbHA9J051bWJlciBvZiB3b3JrZXJzJykKICAgIAogICAgYXJncyA9IHBhcnNlci5wYXJzZV9hcmdzKCkKICAgIAogICAgIyBWYWxpZGF0ZSBpbnB1dHMKICAgIGlmIG5vdCBvcy5wYXRoLmV4aXN0cyhhcmdzLm1vdW50X3BhdGgpOgogICAgICAgIHByaW50KGYiRXJyb3I6IFBhdGgge2FyZ3MubW91bnRfcGF0aH0gZG9lcyBub3QgZXhpc3QiKQogICAgICAgIHN5cy5leGl0KDEpCiAgICAKICAgIHNjYW5uZXIgPSBTY2FubmVyKGFyZ3MuZGIsIGFyZ3Mud29ya2VycykKICAgIHNjYW5uZXIuc2NhbihhcmdzLm1vdW50X3BhdGgsIGFyZ3MubW91bnRfbmFtZSkKCmlmIF9fbmFtZV9fID09ICdfX21haW5fXyc6CiAgICBtYWluKCkg
PYTHON_B64_END
base64 -d nas_scanner_hp.py.b64 > nas_scanner_hp.py && rm nas_scanner_hp.py.b64

# Create Dockerfile (base64 encoded)
cat > Dockerfile.b64 << 'DOCKERFILE_B64_END'
RlJPTSBweXRob246My4xMS1zbGltCgpSVU4gYXB0LWdldCB1cGRhdGUgJiYgYXB0LWdldCBpbnN0YWxsIC15IFwKICAgIHJzeW5jIFwKICAgIGh0b3AgXAogICAgaW90b3AgXAogICAgc3lzc3RhdCBcCiAgICAmJiBybSAtcmYgL3Zhci9saWIvYXB0L2xpc3RzLyoKCldPUktESVIgL2FwcAoKIyBDb3B5IHRoZSBzY2FubmVyIHNjcmlwdApDT1BZIG5hc19zY2FubmVyX2hwLnB5IC4vCgpFTlYgUFlUSE9OVU5CVUZGRVJFRD0xCkVOViBQWVRIT05ET05UV1JJVEVCWVRFQ09ERT0xCgojIE9wdGltaXplIFB5dGhvbiBmb3IgcGVyZm9ybWFuY2UKRU5WIFBZVEhPTk9QVElNSVpFPTEKCkNNRCBbInB5dGhvbiIsICJuYXNfc2Nhbm5lcl9ocC5weSJdIA==
DOCKERFILE_B64_END
base64 -d Dockerfile.b64 > Dockerfile && rm Dockerfile.b64

# Build the container
echo "Building high-performance Docker image..."
docker build -t nas-scanner-hp:latest .

# Create runner script (base64 encoded)
cat > run_extreme_parallel.sh.b64 << 'RUNNER_B64_END'
IyEvYmluL2Jhc2gKIyBFeHRyZW1lIFBhcmFsbGVsIFNjYW5uZXIgLSBVc2VzIGFsbCAxOTIgdGhyZWFkcwoKIyBDb25maWd1cmF0aW9uClNDQU5fREFUQV9ESVI9Ii9tbnQvdXNlci9hcHBkYXRhL25hcy1zY2FubmVyL3NjYW5fZGF0YSIKREJfUEFUSD0iJFNDQU5fREFUQV9ESVIvbmFzX2NhdGFsb2cuZGIiCgojIFdpdGggMTkyIHRocmVhZHMsIHdlIGNhbiBiZSB2ZXJ5IGFnZ3Jlc3NpdmUKTUFYX0NPTlRBSU5FUlM9OCAgICAgICAgICAgIyBSdW4gOCBjb250YWluZXJzIHNpbXVsdGFuZW91c2x5CldPUktFUlNfUEVSX0NPTlRBSU5FUj0yNCAgICMgMjQgd29ya2VycyBwZXIgY29udGFpbmVyIChzaW1wbGlmaWVkIGFyY2hpdGVjdHVyZSkKIyBUb3RhbDogOCAqIDI0ID0gMTkyIHRocmVhZHMgKG1hdGNoZXMgc3lzdGVtIGNhcGFjaXR5KQoKcHJpbnRfc3RhdHVzKCkgewogICAgZWNobyAtZSAiXDAzM1swOzM0bVskKGRhdGUgJyslSDolTTolUycpXVwwMzNbMG0gJDEiCn0KCiMgRnVuY3Rpb24gdG8gc3RhcnQgYSBoaWdoLXBlcmZvcm1hbmNlIGNvbnRhaW5lcgpzdGFydF9ocF9jb250YWluZXIoKSB7CiAgICBsb2NhbCBtb3VudF9wYXRoPSQxCiAgICBsb2NhbCBtb3VudF9uYW1lPSQyCiAgICBsb2NhbCBjb250YWluZXJfbmFtZT0ibmFzLWhwLSR7bW91bnRfbmFtZX0iCiAgICAKICAgIHByaW50X3N0YXR1cyAiU3RhcnRpbmcgaGlnaC1wZXJmb3JtYW5jZSBzY2FuIG9mICRtb3VudF9uYW1lIgogICAgCiAgICBkb2NrZXIgcnVuIC1kIFwKICAgICAgICAtLW5hbWUgIiRjb250YWluZXJfbmFtZSIgXAogICAgICAgIC0tcm0gXAogICAgICAgIC12ICIkbW91bnRfcGF0aDokbW91bnRfcGF0aDpybyIgXAogICAgICAgIC12ICIkU0NBTl9EQVRBX0RJUjovZGF0YSIgXAogICAgICAgIC0tY3B1cz0iMjQiIFwKICAgICAgICAtLW1lbW9yeT0iMjRnIiBcCiAgICAgICAgLS11bGltaXQgbm9maWxlPTY1NTM2OjY1NTM2IFwKICAgICAgICAtLXVsaW1pdCBucHJvYz0zMjc2ODozMjc2OCBcCiAgICAgICAgbmFzLXNjYW5uZXItaHA6bGF0ZXN0IFwKICAgICAgICBweXRob24gbmFzX3NjYW5uZXJfaHAucHkgIiRtb3VudF9wYXRoIiAiJG1vdW50X25hbWUiIFwKICAgICAgICAgICAgLS1kYiAvZGF0YS9uYXNfY2F0YWxvZy5kYiBcCiAgICAgICAgICAgIC0td29ya2VycyAkV09SS0VSU19QRVJfQ09OVEFJTkVSCiAgICAKICAgIGVjaG8gIiRjb250YWluZXJfbmFtZSIKfQoKIyBNYWluIGV4ZWN1dGlvbgptYWluKCkgewogICAgZWNobyAiPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0iCiAgICBlY2hvICJFWFRSRU1FIFBBUkFMTEVMIE5BUyBTQ0FOTkVSIgogICAgZWNobyAiU3lzdGVtOiAxOTIgdGhyZWFkcywgMTI4R0IgUkFNIgogICAgZWNobyAiPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0iCiAgICAKICAgICMgU2V0IHN5c3RlbSBvcHRpbWl6YXRpb25zCiAgICBwcmludF9zdGF0dXMgIlNldHRpbmcgc3lzdGVtIG9wdGltaXphdGlvbnMuLi4iCiAgICAKICAgICMgSW5jcmVhc2UgZmlsZSBkZXNjcmlwdG9ycyAoaWYgcm9vdCkKICAgIHVsaW1pdCAtbiA2NTUzNiAyPi9kZXYvbnVsbCB8fCB0cnVlCiAgICAKICAgICMgUGFyc2UgbW9kZQogICAgY2FzZSAiJDEiIGluCiAgICAgICAgZnVsbCkKICAgICAgICAgICAgcHJpbnRfc3RhdHVzICJGVUxMIFNDQU4gTU9ERSAtIFVzaW5nIGFsbCAxOTIgdGhyZWFkcyIKICAgICAgICAgICAgOzsKICAgICAgICAqKQogICAgICAgICAgICBlY2hvICJVc2FnZTogJDAgZnVsbCIKICAgICAgICAgICAgZWNobyAiTm90ZTogVGVzdCBtb2RlIHJlbW92ZWQgLSBzaW1wbGlmaWVkIHNjYW5uZXIgYWx3YXlzIGRvZXMgZnVsbCBzY2FuIgogICAgICAgICAgICBleGl0IDEKICAgICAgICAgICAgOzsKICAgIGVzYWMKICAgIAogICAgIyBBdXRvLWRldGVjdCBtb3VudHMKICAgIGRlY2xhcmUgLWEgTU9VTlRTCiAgICAKICAgICMgU2NhbiB1c2VyIHNoYXJlcwogICAgZm9yIHNoYXJlIGluIC9tbnQvdXNlci8qOyBkbwogICAgICAgIGlmIFtbIC1kICIkc2hhcmUiIF1dOyB0aGVuCiAgICAgICAgICAgIHNoYXJlX25hbWU9JChiYXNlbmFtZSAiJHNoYXJlIikKICAgICAgICAgICAgY2FzZSAiJHNoYXJlX25hbWUiIGluCiAgICAgICAgICAgICAgICBhcHBkYXRhfHN5c3RlbXxkb21haW5zKQogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgICAgICAgICAgOzsKICAgICAgICAgICAgICAgICopCiAgICAgICAgICAgICAgICAgICAgTU9VTlRTKz0oIiRzaGFyZTokc2hhcmVfbmFtZSIpCiAgICAgICAgICAgICAgICAgICAgOzsKICAgICAgICAgICAgZXNhYwogICAgICAgIGZpCiAgICBkb25lCiAgICAKICAgIHByaW50X3N0YXR1cyAiRm91bmQgJHsjTU9VTlRTW0BdfSBtb3VudHMgdG8gc2NhbiIKICAgICMgSU5TRVJUX1lPVVJfQ09ERQogICAgcmVhZCAtcCAiUHJvY2VlZCB3aXRoIHNjYW5uaW5nPyAoeSB0byBjb250aW51ZSwgYW55dGhpbmcgZWxzZSB0byBxdWl0KTogIiBjb25maXJtCiAgICBpZiBbWyAiJGNvbmZpcm0iICE9ICJ5IiAmJiAiJGNvbmZpcm0iICE9ICJZIiBdXTsgdGhlbgogICAgICAgIGVjaG8gIkFib3J0ZWQgYnkgdXNlci4iCiAgICAgICAgZXhpdCAwCiAgICBmaQogICAgIyBTdGFydCB0aW1lCiAgICBzdGFydF90aW1lPSQoZGF0ZSArJXMpCiAgICAKICAgICMgTGF1bmNoIGFsbCBjb250YWluZXJzCiAgICBjb250YWluZXJzPSgpCiAgICBmb3IgbW91bnRfaW5mbyBpbiAiJHtNT1VOVFNbQF19IjsgZG8KICAgICAgICBtb3VudF9wYXRoPSIke21vdW50X2luZm8lJToqfSIKICAgICAgICBtb3VudF9uYW1lPSIke21vdW50X2luZm8jIyo6fSIKICAgICAgICAKICAgICAgICAjIFdhaXQgaWYgd2UncmUgYXQgbWF4IGNvbnRhaW5lcnMKICAgICAgICB3aGlsZSBbICQoZG9ja2VyIHBzIC0tZmlsdGVyICJuYW1lPW5hcy1ocC0iIC1xIHwgd2MgLWwpIC1nZSAkTUFYX0NPTlRBSU5FUlMgXTsgZG8KICAgICAgICAgICAgc2xlZXAgMgogICAgICAgIGRvbmUKICAgICAgICAKICAgICAgICBjb250YWluZXI9JChzdGFydF9ocF9jb250YWluZXIgIiRtb3VudF9wYXRoIiAiJG1vdW50X25hbWUiKQogICAgICAgIGNvbnRhaW5lcnMrPSgiJGNvbnRhaW5lciIpCiAgICAgICAgCiAgICAgICAgIyBTbWFsbCBkZWxheSB0byBzdGFnZ2VyIHN0YXJ0cwogICAgICAgIHNsZWVwIDAuNQogICAgZG9uZQogICAgCiAgICAjIE1vbml0b3IgcHJvZ3Jlc3MKICAgIHByaW50X3N0YXR1cyAiQWxsIGNvbnRhaW5lcnMgbGF1bmNoZWQuIE1vbml0b3JpbmcgcHJvZ3Jlc3MuLi4iCiAgICAKICAgICMgV2FpdCBmb3IgYWxsIHRvIGNvbXBsZXRlCiAgICBmb3IgY29udGFpbmVyIGluICIke2NvbnRhaW5lcnNbQF19IjsgZG8KICAgICAgICBkb2NrZXIgd2FpdCAiJGNvbnRhaW5lciIgPiAvZGV2L251bGwgMj4mMSAmCiAgICBkb25lCiAgICAKICAgICMgU2hvdyBsaXZlIHN0YXRzIHdoaWxlIHdhaXRpbmcKICAgIHdoaWxlIFsgJChkb2NrZXIgcHMgLS1maWx0ZXIgIm5hbWU9bmFzLWhwLSIgLXEgfCB3YyAtbCkgLWd0IDAgXTsgZG8KICAgICAgICBjbGVhcgogICAgICAgIGVjaG8gIj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IgogICAgICAgIGVjaG8gIkVYVFJFTUUgUEFSQUxMRUwgU0NBTiBJTiBQUk9HUkVTUyIKICAgICAgICBlY2hvICI9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSIKICAgICAgICAKICAgICAgICAjIFNob3cgY29udGFpbmVyIHN0YXRzCiAgICAgICAgZG9ja2VyIHN0YXRzIC0tbm8tc3RyZWFtIC0tZm9ybWF0ICJ0YWJsZSB7ey5Db250YWluZXJ9fVx0e3suQ1BVUGVyY319XHR7ey5NZW1Vc2FnZX19XHR7ey5OZXRJT319XHR7ey5CbG9ja0lPfX0iIFwKICAgICAgICAgICAgJChkb2NrZXIgcHMgLS1maWx0ZXIgIm5hbWU9bmFzLWhwLSIgLXEpCiAgICAgICAgCiAgICAgICAgIyBTaG93IGRhdGFiYXNlIHN0YXRzCiAgICAgICAgZWNobyAtZSAiXG5EYXRhYmFzZSBQcm9ncmVzczoiCiAgICAgICAgZG9ja2VyIHJ1biAtLXJtIC12ICIkU0NBTl9EQVRBX0RJUjovZGF0YSIgbmFzLXNjYW5uZXItaHA6bGF0ZXN0IHB5dGhvbiAtYyAiCmltcG9ydCBzcWxpdGUzCmNvbm4gPSBzcWxpdGUzLmNvbm5lY3QoJy9kYXRhL25hc19jYXRhbG9nLmRiJykKY3Vyc29yID0gY29ubi5jdXJzb3IoKQpjdXJzb3IuZXhlY3V0ZSgnJycKICAgIFNFTEVDVCBtb3VudF9wb2ludCwgQ09VTlQoKikgYXMgZmlsZXNfc2Nhbm5lZCwgU1VNKHNpemUpLzEwMjQqKjMgYXMgZ2IgCiAgICBGUk9NIGZpbGVzIAogICAgR1JPVVAgQlkgbW91bnRfcG9pbnQgCiAgICBPUkRFUiBCWSBTVU0oc2l6ZSkgREVTQwonJycpCnRvdGFsX2ZpbGVzID0gMAp0b3RhbF9nYiA9IDAKZm9yIG1vdW50LCBmaWxlcywgZ2IgaW4gY3Vyc29yLmZldGNoYWxsKCk6CiAgICBwcmludChmJ3ttb3VudDoyMH0ge2ZpbGVzOj4xMCx9IGZpbGVzICB7Z2I6PjguMWZ9IEdCJykKICAgIHRvdGFsX2ZpbGVzICs9IGZpbGVzCiAgICB0b3RhbF9nYiArPSBnYgpwcmludCgnLScgKiA1MCkKcHJpbnQoZid7J1RPVEFMJzoyMH0ge3RvdGFsX2ZpbGVzOj4xMCx9IGZpbGVzICB7dG90YWxfZ2I6PjguMWZ9IEdCJykKIgogICAgICAgIAogICAgICAgIHNsZWVwIDUKICAgIGRvbmUKICAgIAogICAgIyBDYWxjdWxhdGUgdG90YWwgdGltZQogICAgZW5kX3RpbWU9JChkYXRlICslcykKICAgIGR1cmF0aW9uPSQoKGVuZF90aW1lIC0gc3RhcnRfdGltZSkpCiAgICAKICAgIHByaW50X3N0YXR1cyAiU2NhbiBjb21wbGV0ZWQgaW4gJCgoZHVyYXRpb24vNjApKSBtaW51dGVzIgogICAgCiAgICAjIEdlbmVyYXRlIGZpbmFsIHJlcG9ydAogICAgcHJpbnRfc3RhdHVzICJHZW5lcmF0aW5nIGZpbmFsIHJlcG9ydC4uLiIKICAgIGRvY2tlciBydW4gLS1ybSAtdiAiJFNDQU5fREFUQV9ESVI6L2RhdGEiIG5hcy1zY2FubmVyLWhwOmxhdGVzdCBweXRob24gLWMgIgppbXBvcnQgc3FsaXRlMwpjb25uID0gc3FsaXRlMy5jb25uZWN0KCcvZGF0YS9uYXNfY2F0YWxvZy5kYicpCmN1cnNvciA9IGNvbm4uY3Vyc29yKCkKCnByaW50KCdcbj09PSBGSU5BTCBTQ0FOIFJFUE9SVCA9PT1cbicpCgojIFRvdGFsIHN0YXRzCmN1cnNvci5leGVjdXRlKCdTRUxFQ1QgQ09VTlQoKiksIFNVTShzaXplKSBGUk9NIGZpbGVzJykKdG90YWxfZmlsZXMsIHRvdGFsX3NpemUgPSBjdXJzb3IuZmV0Y2hvbmUoKQpwcmludChmJ1RvdGFsIGZpbGVzOiB7dG90YWxfZmlsZXM6LH0nKQpwcmludChmJ1RvdGFsIHNpemU6IHt0b3RhbF9zaXplLzEwMjQqKjQ6LjJmfSBUQicpCnByaW50KGYnU2NhbiBkdXJhdGlvbjogJGR1cmF0aW9uIHNlY29uZHMnKQpwcmludChmJ0F2ZXJhZ2Ugc3BlZWQ6IHt0b3RhbF9maWxlcy8kZHVyYXRpb246LjBmfSBmaWxlcy9zZWNvbmQnKQpwcmludChmJ0F2ZXJhZ2UgdGhyb3VnaHB1dDoge3RvdGFsX3NpemUvMTAyNCoqMi8kZHVyYXRpb246LjBmfSBNQi9zZWNvbmQnKQoKIyBDcmVhdGUgaW5kZXhlcyBub3cKcHJpbnQoJ1xuQ3JlYXRpbmcgaW5kZXhlcyBmb3IgZmFzdCBxdWVyaWVzLi4uJykKY3Vyc29yLmV4ZWN1dGUoJ0NSRUFURSBJTkRFWCBJRiBOT1QgRVhJU1RTIGlkeF9jaGVja3N1bSBPTiBmaWxlcyhjaGVja3N1bSknKQpjdXJzb3IuZXhlY3V0ZSgnQ1JFQVRFIElOREVYIElGIE5PVCBFWElTVFMgaWR4X3NpemUgT04gZmlsZXMoc2l6ZSknKQpjdXJzb3IuZXhlY3V0ZSgnQ1JFQVRFIElOREVYIElGIE5PVCBFWElTVFMgaWR4X2V4dGVuc2lvbiBPTiBmaWxlcyhleHRlbnNpb24pJykKY29ubi5jb21taXQoKQpwcmludCgnSW5kZXhlcyBjcmVhdGVkLicpCiIKfQoKIyBSdW4KbWFpbiAiJEAiIA==
RUNNER_B64_END
base64 -d run_extreme_parallel.sh.b64 > run_extreme_parallel.sh && rm run_extreme_parallel.sh.b64
chmod +x run_extreme_parallel.sh

# Create monitor script (base64 encoded)
cat > monitor_performance.sh.b64 << 'MONITOR_B64_END'
IyEvYmluL2Jhc2gKIyBSZWFsLXRpbWUgcGVyZm9ybWFuY2UgbW9uaXRvcmluZyBmb3IgdGhlIHNjYW4KCndoaWxlIHRydWU7IGRvCiAgICBjbGVhcgogICAgZWNobyAiPT09IE5BUyBTQ0FOTkVSIFBFUkZPUk1BTkNFIE1PTklUT1IgPT09IgogICAgZWNobyAiVGltZTogJChkYXRlKSIKICAgIGVjaG8gIiIKICAgIAogICAgIyBTeXN0ZW0gc3RhdHMKICAgIGVjaG8gIlNZU1RFTSBMT0FEOiIKICAgIHVwdGltZQogICAgZWNobyAiIgogICAgCiAgICAjIENvbnRhaW5lciBzdGF0cwogICAgZWNobyAiQ09OVEFJTkVSIFBFUkZPUk1BTkNFOiIKICAgIGRvY2tlciBzdGF0cyAtLW5vLXN0cmVhbSAtLWZvcm1hdCAidGFibGUge3suQ29udGFpbmVyfX1cdHt7LkNQVVBlcmN9fVx0e3suTWVtVXNhZ2V9fVx0e3suUElEc319IiBcCiAgICAgICAgJChkb2NrZXIgcHMgLS1maWx0ZXIgIm5hbWU9bmFzLWhwLSIgLXEpIDI+L2Rldi9udWxsIHx8IGVjaG8gIk5vIGNvbnRhaW5lcnMgcnVubmluZyIKICAgIAogICAgIyBJL08gc3RhdHMKICAgIGVjaG8gLWUgIlxuRElTSyBJL086IgogICAgaW9zdGF0IC14IDEgMiB8IHRhaWwgLW4gKzcgfCBoZWFkIC0yMAogICAgCiAgICAjIERhdGFiYXNlIG9wZXJhdGlvbnMgcGVyIHNlY29uZAogICAgZWNobyAtZSAiXG5EQVRBQkFTRSBPUEVSQVRJT05TOiIKICAgIGRvY2tlciBydW4gLS1ybSAtdiAvbW50L3VzZXIvYXBwZGF0YS9uYXMtc2Nhbm5lci9zY2FuX2RhdGE6L2RhdGEgbmFzLXNjYW5uZXItaHA6bGF0ZXN0IHB5dGhvbiAtYyAiCmltcG9ydCBzcWxpdGUzLCB0aW1lCmNvbm4gPSBzcWxpdGUzLmNvbm5lY3QoJy9kYXRhL25hc19jYXRhbG9nLmRiJykKY3Vyc29yID0gY29ubi5jdXJzb3IoKQpjdXJzb3IuZXhlY3V0ZSgnU0VMRUNUIENPVU5UKCopIEZST00gZmlsZXMnKQpjb3VudDEgPSBjdXJzb3IuZmV0Y2hvbmUoKVswXQp0aW1lLnNsZWVwKDEpCmN1cnNvci5leGVjdXRlKCdTRUxFQ1QgQ09VTlQoKikgRlJPTSBmaWxlcycpCmNvdW50MiA9IGN1cnNvci5mZXRjaG9uZSgpWzBdCnByaW50KGYnRmlsZXMvc2Vjb25kOiB7Y291bnQyLWNvdW50MTosfScpCiIgMj4vZGV2L251bGwgfHwgZWNobyAiRGF0YWJhc2Ugbm90IGFjY2Vzc2libGUiCiAgICAKICAgIHNsZWVwIDUKZG9uZSA=
MONITOR_B64_END
base64 -d monitor_performance.sh.b64 > monitor_performance.sh && rm monitor_performance.sh.b64
chmod +x monitor_performance.sh

echo ""
echo "✅ EXTREME PERFORMANCE SETUP COMPLETE!"
echo ""
echo "This setup is optimized for your 192-thread system:"
echo "  - Runs up to 8 containers in parallel"
echo "  - Each container uses 24 workers (simplified architecture)"
echo "  - Safe database optimizations with proper cleanup"
echo "  - Robust error handling and logging"
echo ""
echo "To start scanning:"
echo "  cd /mnt/user/appdata/nas-scanner"
echo "  ./run_extreme_parallel.sh full    # Full scan with confirmation"
echo ""
echo "To monitor performance:"
echo "  ./monitor_performance.sh          # Real-time system stats"
echo ""
echo "Expected performance:"
echo "  - 20,000-100,000 files/second (depending on file sizes)"
echo "  - 2-10 GB/second throughput"
echo "  - Robust scanning with blake2b checksums"
echo ""
echo "🚀 Setup complete! Ready to scan."
